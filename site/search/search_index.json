{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"E2S Visualitations (E2SViz)","text":"<p>E2SViz is a data visualization package that allows data preprocessing, <code>e2sviz.data.standard_data_process.DataPrep</code> &amp; <code>e2sviz.data.standard_data_process.DataManip</code>, and data visualisation, <code>e2sviz.visualization.visualize.DataViz</code>.</p> <p>Examples of how to use e2svizs' functionality can be found in <code>e2sviz_example.ipynb</code> which uses demo data <code>example_consumption_data.csv</code>.</p>"},{"location":"reference/data/","title":"Index","text":""},{"location":"reference/data/data_preparation/","title":"Data preparation","text":""},{"location":"reference/data/data_preparation/#e2sviz.data.data_preparation.ConvertColumnDataFormat","title":"<code>ConvertColumnDataFormat</code>  <code>dataclass</code>","text":"<p>Converts column wise data to row wise.</p> <p>Attributes:</p> Name Type Description <code>freq</code> <code>Optional[str]</code> <p>Frequency of the data, by default '30T'.</p> <code>datetime_format</code> <code>Optional[str]</code> <p>Datetime format of the data, by default '%d/%m/%Y'.</p> <code>date_column</code> <code>Optional[str]</code> <p>Column name of the date column, by default 'Settlement Date'.</p> <p>Methods:</p> Name Description <code>data_cleaner</code> <p>Reorder data from column wise to row wise.</p> <code>convert_half_hourly_to_datetime</code> <p>Convert half hourly data to datetime.</p> <code>prep_for_formatting</code> <p>Prepare data for formatting.</p>"},{"location":"reference/data/data_preparation/#e2sviz.data.data_preparation.ConvertColumnDataFormat.convert_half_hourly_to_datetime","title":"<code>convert_half_hourly_to_datetime(datetime_str)</code>","text":"<p>Convert half hourly data to datetime.</p> <p>Parameters:</p> Name Type Description Default <code>datetime_str</code> <code>str</code> <p>Half hourly data.</p> required <p>Returns:</p> Type Description <code>datetime</code> <p>Datetime object.</p>"},{"location":"reference/data/data_preparation/#e2sviz.data.data_preparation.ConvertColumnDataFormat.data_cleaner","title":"<code>data_cleaner(data)</code>","text":"<p>Reorder data from column wise to row wise.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Raw data in a dataframe.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame, with values reordered.</p>"},{"location":"reference/data/data_preparation/#e2sviz.data.data_preparation.ConvertColumnDataFormat.prep_for_formatting","title":"<code>prep_for_formatting(data)</code>","text":"<p>Prepare data for formatting.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Raw data in a dataframe.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame, with values reordered.</p>"},{"location":"reference/data/data_preparation/#e2sviz.data.data_preparation.FillMissingData","title":"<code>FillMissingData</code>  <code>dataclass</code>","text":"<p>Fills missing values in dataframe.</p> <p>Attributes:</p> Name Type Description <code>func</code> <code>str</code> <p>Method to use for filling missing values.</p> <p>Methods:</p> Name Description <code>data_cleaner</code> <p>Fill missing values in the data.</p> <code>fillna_mean</code> <p>Fill missing values with column means.</p> <code>fillna_rolling</code> <p>Fill missing values using rolling mean.</p>"},{"location":"reference/data/data_preparation/#e2sviz.data.data_preparation.FillMissingData.data_cleaner","title":"<code>data_cleaner(data)</code>","text":"<p>Fill missing values in the data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Pandas dataframe.</p> required <code>func</code> <code>str</code> <p><code>meanfill</code> or <code>rollingfill</code>.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame, with values filled.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Raised when an unsupported fill method is provided.</p>"},{"location":"reference/data/data_preparation/#e2sviz.data.data_preparation.FillMissingData.fillna_mean","title":"<code>fillna_mean(data)</code>","text":"<p>Fill missing values in the data with column means.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Input data.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Data with missing values filled with column means.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Raised when an unsupported data type is provided.</p>"},{"location":"reference/data/data_preparation/#e2sviz.data.data_preparation.FillMissingData.fillna_rolling","title":"<code>fillna_rolling(data)</code>","text":"<p>Fill missing values in the data using rolling mean.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Input data.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Data with missing values filled using rolling mean.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Raised when an unsupported data type is provided.</p>"},{"location":"reference/data/data_preparation/#e2sviz.data.data_preparation.GenerateDatetime","title":"<code>GenerateDatetime</code>  <code>dataclass</code>","text":"<p>Creates a datetime for dataset or without one.</p> <p>Attributes:</p> Name Type Description <code>start_date</code> <code>datetime</code> <p>When the datetime series will start, by default <code>datetime(2022, 1, 1)</code>.</p> <code>freq</code> <code>str</code> <p>Frequency of the datetime series, by default \"30T\".</p> <code>periods</code> <code>int</code> <p>Length used to set the length of the array if no data is given, by default 48.</p> <code>tz</code> <code>str</code> <p>Timezone for the datetime series, by default 'UTC'.</p> <p>Methods:</p> Name Description <code>data_cleaner</code> <p>Add datetime column to the data.</p>"},{"location":"reference/data/data_preparation/#e2sviz.data.data_preparation.GenerateDatetime.data_cleaner","title":"<code>data_cleaner(data)</code>","text":"<p>Add datetime column to the data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Either numpy array or pandas dataframe.</p> required <code>start_date</code> <code>Optional[datetime]</code> <p>When the datetime series will start, by default datetime(2022, 1, 1).</p> required <code>freq</code> <code>Optional[str]</code> <p>Frequency of the datetime series, by default \"30T\".</p> required <code>periods</code> <code>Optional[int]</code> <p>Length used to set the length of the array if no data is given, by default 48.</p> required <code>tz</code> <code>Optional[str]</code> <p>Timezone for the datetime series, by default 'UTC'.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Input data with datetime column (index if DataFrame, column zero if array).</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Raised when an unsupported data type is provided.</p>"},{"location":"reference/data/data_preparation/#e2sviz.data.data_preparation.OutlierRemover","title":"<code>OutlierRemover</code>  <code>dataclass</code>","text":"<p>Removes outliers from dataframe.</p> <p>Attributes:</p> Name Type Description <code>method</code> <code>str</code> <p>Method to use for outlier removal.</p> <p>Methods:</p> Name Description <code>data_cleaner</code> <p>Remove outliers from the data.</p> <code>iqr_outliers</code> <p>Use interquartile range to find outliers.</p>"},{"location":"reference/data/data_preparation/#e2sviz.data.data_preparation.OutlierRemover.data_cleaner","title":"<code>data_cleaner(data)</code>","text":"<p>Remove outliers from the data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Either numpy array or pandas dataframe.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Dataframe of cleaned data.</p>"},{"location":"reference/data/data_preparation/#e2sviz.data.data_preparation.OutlierRemover.iqr_outliers","title":"<code>iqr_outliers(data)</code>","text":"<p>Use interquartile range to find outliers.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>ndarray</code> <p>Input array to find outliers.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Boolean array indicating outliers.</p>"},{"location":"reference/data/data_preparation/#e2sviz.data.data_preparation.convert_data_types","title":"<code>convert_data_types(data, columns=None)</code>","text":"<p>Convert data types between NumPy ndarray and pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray | DataFrame</code> <p>Input data to be converted.  </p> required <code>columns</code> <code>List[str] | None</code> <p>List of column names for DataFrame conversion. Defaults to None.  </p> <code>None</code> <p>Returns:</p> Type Description <code>ndarray | ValueError</code> <p>Converted data in the specified type.</p>"},{"location":"reference/data/data_preparation/#e2sviz.data.data_preparation.retrieve_data","title":"<code>retrieve_data(data)</code>","text":"<p>Retrieve the underlying NumPy ndarray from the input data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray | DataFrame</code> <p>Input data from which to retrieve the ndarray.</p> required <p>Returns:</p> Type Description <code>ndarray</code> <p>np.ndarray: NumPy ndarray representing the input data.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Raised when an unsupported data type is provided.</p>"},{"location":"reference/data/functions/","title":"Functions","text":""},{"location":"reference/data/functions/#data.functions.add_time_features","title":"<code>add_time_features(dataf)</code>","text":"<p>Add time features to the dataframe. The features added are, Hour, Day of week, Day of year, Month, Year, Weekday flag, Half hour, Date, Week, Season &amp; Season number.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The dataframe to add time features to.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The dataframe with the time features added.</p>"},{"location":"reference/data/functions/#data.functions.format_avg_week_index","title":"<code>format_avg_week_index(dataf, timestep)</code>","text":"<p>Formats the index of the average week dataframe to be a tidier index. </p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The dataframe to format the index for.</p> required <code>timestep</code> <code>TimeStep</code> <p>The timestep of the data.</p> required <p>Returns:</p> Type Description <code>Index</code> <p>The formatted index.</p>"},{"location":"reference/data/functions/#data.functions.get_avg_week_by_season_df","title":"<code>get_avg_week_by_season_df(dataf, target_col, timestep=enums.TimeStep.HALFHOUR, func=np.mean)</code>","text":"<p>Takes a timeseries dataframe that has added time_features and returns a dataframe  of average weeks for each season. Good for use with data that has a seasonal pattern.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The dataframe to get the average week by season for.  </p> required <code>target_col</code> <code>str</code> <p>The column to get the average week by season for.  </p> required <code>timestep</code> <code>Optional[TimeStep]</code> <p>The timestep of the data. Default is <code>enums.TimeStep.HALFHOUR</code>.  </p> <code>HALFHOUR</code> <code>func</code> <code>Optional[Callable]</code> <p>The function to use to aggregate the data. Default is <code>np.mean</code>.  </p> <code>mean</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A dataframe of average weeks for each season.</p>"},{"location":"reference/data/functions/#data.functions.get_season","title":"<code>get_season(month)</code>","text":"<p>Returns the season for a given month.</p> <p>Parameters:</p> Name Type Description Default <code>month</code> <code>int</code> <p>The month to get the season for.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The season for the given month.</p>"},{"location":"reference/data/manipulations/","title":"Manipulations","text":""},{"location":"reference/data/manipulations/#data.manipulations.CombineColumnManipulator","title":"<code>CombineColumnManipulator</code>","text":"<p>Manipulate data by combining columns.</p> <p>Methods:</p> Name Description <code>data_formatter</code> <p>Format the data by combining columns.</p>"},{"location":"reference/data/manipulations/#data.manipulations.CombineColumnManipulator.data_formatter","title":"<code>data_formatter(data, col_1, col_2)</code>","text":"<p>Format the data by combining columns.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray | DataFrame</code> <p>The input data.  </p> required <code>col_1</code> <code>str | int</code> <p>The first column to combine.  </p> required <code>col_2</code> <code>str | int</code> <p>The second column to combine.  </p> required <p>Returns:</p> Type Description <code>NDArray | DataFrame</code> <p>The data with a new column containing the combined values.</p>"},{"location":"reference/data/manipulations/#data.manipulations.EquationManipulator","title":"<code>EquationManipulator</code>","text":"<p>Manipulate data by applying equations.</p> <p>Methods:</p> Name Description <code>data_formatter</code> <p>Format the data by applying equations.</p>"},{"location":"reference/data/manipulations/#data.manipulations.EquationManipulator.data_formatter","title":"<code>data_formatter(data, target_col, func, new_col='New column')</code>","text":"<p>Format the data by applying equations.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>np.ndarray  pd.DataFrame</code> <p>The input data.  </p> required <code>target_col</code> <code>str | int</code> <p>The target column to aggregate.  </p> required <code>func</code> <code>str</code> <p>The aggregation function as a string.  </p> required <code>new_col</code> <code>str | float</code> <p>The name for the new column, by default 'New column'.  </p> <code>'New column'</code> <p>Returns:</p> Type Description <code>NDArray | DataFrame</code> <p>The data with a new column of aggregated values.</p>"},{"location":"reference/data/manipulations/#data.manipulations.GroupbyManipulator","title":"<code>GroupbyManipulator</code>","text":"<p>Manipulate data by grouping.</p> <p>Methods:</p> Name Description <code>data_formatter</code> <p>Format the data by grouping.</p>"},{"location":"reference/data/manipulations/#data.manipulations.GroupbyManipulator.data_formatter","title":"<code>data_formatter(data, groupby, agg, target=None)</code>","text":"<p>Format the data by grouping.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray | DataFrame</code> <p>The input data.  </p> required <code>groupby</code> <code>list[int | str]</code> <p>The columns to group by.  </p> required <code>agg</code> <code>str</code> <p>The aggregation method.  </p> required <code>target</code> <code>int | str | None</code> <p>The column to aggregate, by default None.  </p> <code>None</code> <p>Returns:</p> Type Description <code>NDArray | DataFrame</code> <p>The grouped data.</p>"},{"location":"reference/data/manipulations/#data.manipulations.ResampleManipulator","title":"<code>ResampleManipulator</code>","text":"<p>Resampler class.</p> <p>Methods:</p> Name Description <code>data_formatter</code> <p>Resample the data.</p>"},{"location":"reference/data/manipulations/#data.manipulations.ResampleManipulator.data_formatter","title":"<code>data_formatter(data, split_by, aggregation)</code>","text":"<p>Format the data by resampling.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ndarray | DataFrame</code> <p>The input data.  </p> required <code>split_by</code> <code>str</code> <p>The resampling method.  </p> required <code>aggregation</code> <code>str</code> <p>The aggregation method.  </p> required <p>Returns:</p> Type Description <code>NDArray | DataFrame</code> <p>The resampled data.</p>"},{"location":"reference/data/manipulations/#data.manipulations.create_seasonal_average_week","title":"<code>create_seasonal_average_week(season, dataf, target_col=None, func=np.mean)</code>","text":"<p>Create a seasonal average week for the specified season.</p> <p>Parameters:</p> Name Type Description Default <code>season</code> <code>Season</code> <p>The season for which to calculate the average week.  </p> required <code>dataf</code> <code>DataFrame</code> <p>The input DataFrame.  </p> required <code>target_col</code> <code>str | None</code> <p>The target column for aggregation. If None, the first column of the DataFrame is used, by default None.  </p> <code>None</code> <code>func</code> <code>callable</code> <p>The aggregation function to use, by default np.mean.</p> <code>mean</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The seasonal average week.</p>"},{"location":"reference/data/manipulations/#data.manipulations.find_week_in_season","title":"<code>find_week_in_season(loop_data)</code>","text":"<p>Find the week in each season of the year.</p> <p>Parameters:</p> Name Type Description Default <code>loop_data</code> <code>DataFrame</code> <p>The input DataFrame.</p> required <p>Returns:</p> Type Description <code>list[DataFrame]</code> <p>A list of DataFrames containing the weekly data for each season.</p>"},{"location":"reference/data/manipulations/#data.manipulations.get_seasonal_week","title":"<code>get_seasonal_week(data)</code>","text":"<p>Get weekly data for each season.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The input DataFrame.</p> required <p>Returns:</p> Type Description <code>list[DataFrame]</code> <p>A list of DataFrames containing the weekly data for each season.</p>"},{"location":"reference/data/manipulations/#data.manipulations.seasonal_avg_week_plot_data","title":"<code>seasonal_avg_week_plot_data(plot_data)</code>","text":"<p>Prepare data for the seasonal average week plot.</p> <p>Parameters:</p> Name Type Description Default <code>plot_data</code> <code>DataFrame</code> <p>The input DataFrame.</p> required <p>Returns:</p> Type Description <code>tuple[Index, DataFrame, DataFrame, DataFrame]</code> <p>A tuple containing the datetime index and the average, maximum, and minimum seasonal average week data.</p>"},{"location":"reference/data/standard_data_process/","title":"Standard data process","text":""},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataManip","title":"<code>DataManip</code>  <code>dataclass</code>","text":"<p>Class for manipulating data.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>DataFrame</code> <p>The input DataFrame.  </p> <code>frequency</code> <code>FrequencySchema</code> <p>The frequency of the data, by default viz_schema.FrequencySchema.MISSING.</p> <p>Methods:</p> Name Description <code>check_freq</code> <p>Check the frequency of the data.</p> <code>check_meta_data</code> <p>Check for metadata.</p> <code>val_rescaler</code> <p>Rescale the values of the column data.</p> <code>unit_rescaler</code> <p>Rescale the units of the column data.</p> <code>check_rescaling</code> <p>Check if the column data requires rescaling.</p> <code>filter</code> <p>Filter the data by given year, month, day or date.</p> <code>groupby</code> <p>Group the data by given column/s and aggregate by a given function.</p> <code>populate_legend</code> <p>Populate the legend column of the metadata.</p> <code>update_metadata</code> <p>Update the metadata for the grouped data.</p> <code>resampled</code> <p>Resample the data by given frequency and aggregate by a given function.</p> <code>rolling</code> <p>Rolling window function.</p> <code>inplace_data</code> <p>Return the DataManip either as its self or as a new variable.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataManip.column_from_freq","title":"<code>column_from_freq: str</code>  <code>property</code>","text":"<p>Get the column name from the frequency.</p> <p>Returns:</p> Type Description <code>str</code> <p>The column name from the frequency.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataManip.dict_of_groupbys","title":"<code>dict_of_groupbys: dict[str, dict[str, list[str]]]</code>  <code>property</code>","text":"<p>Get the dictionary of groupby columns.</p> <p>Returns:</p> Type Description <code>dict[str, dict[str, list[str]]]</code> <p>The dictionary of groupby columns.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataManip.check_freq","title":"<code>check_freq()</code>","text":"<p>Check the frequency of the data if value not provided, it will be infered using pd.infer_freq().</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataManip.check_meta_data","title":"<code>check_meta_data()</code>","text":"<p>Check for metadata, if not provided, default values will be generated/infered from the data available.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataManip.check_rescaling","title":"<code>check_rescaling()</code>","text":"<p>Checks if the column data requires rescaling.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataManip.filter","title":"<code>filter(year=None, season=None, month=None, day=None, hour=None, date=None, columns=None, inplace=False)</code>","text":"<p>Filter the data by given year, month, day or date.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>list[int]</code> <p>The years to filter by.  </p> <code>None</code> <code>season</code> <code>list[int]</code> <p>The seasons to filter by (1: Winter, 2: Spring, 3: Summer, 4: Autumn).  </p> <code>None</code> <code>month</code> <code>list[int]</code> <p>The months to filter by.  </p> <code>None</code> <code>day</code> <code>list[int]</code> <p>The days to filter by.  </p> <code>None</code> <code>date</code> <code>list[date]</code> <p>The dates to filter by.  </p> <code>None</code> <code>inplace</code> <code>bool</code> <p>Whether to filter the data in place or return a new DataFrame.  </p> <code>False</code> <p>Returns:</p> Type Description <code>Self</code> <p>The filtered DataFrame. If inplace is True filtered data is set to self.data.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataManip.groupby","title":"<code>groupby(groupby_type=viz_schema.GroupingKeySchema.WEEK_SEASON, func=np.mean, inplace=False)</code>","text":"<p>Group the data by given column/s and aggregate by a given function.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>str</code> <p>Numpy function to be used for aggregation.  </p> <code>mean</code> <code>groupby_type</code> <code>Callable[[DataFrame], Series]</code> <p>The key for dict_of_groupbys used to return groupby columns.  </p> <code>WEEK_SEASON</code> <p>Returns:</p> Type Description <code>Self</code> <p>The grouped and aggregated data.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataManip.inplace_data","title":"<code>inplace_data(new_data, new_freq=None, new_meta=None, inplace=False)</code>","text":"<p>Return the DataManip either as its self or as a new variable.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The data to be set.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The data.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataManip.populate_legend","title":"<code>populate_legend(dataf, gb_col_data)</code>","text":"<p>Populate the legend column of the metadata.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The grouped and aggregated data.  </p> required <code>gb_col_data</code> <code>dict[str, list[str]]</code> <p>The dictionary of groupby columns.  </p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>The list of legend values.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataManip.resampled","title":"<code>resampled(freq='D', func=np.mean, inplace=False)</code>","text":"<p>Resample the data by given frequency and aggregate by a given function.</p> <p>Parameters:</p> Name Type Description Default <code>freq</code> <code>str</code> <p>The frequency to be used for resampling.  </p> <code>'D'</code> <code>func</code> <code>Callable[[DataFrame], Series]</code> <p>Numpy function to be used for aggregation.  </p> <code>mean</code> <p>Returns:</p> Type Description <code>Self</code> <p>The resampled and aggregated data.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataManip.rolling","title":"<code>rolling(window=3, func=np.mean, inplace=False)</code>","text":"<p>Rolling window function.</p> <p>Parameters:</p> Name Type Description Default <code>window</code> <code>int</code> <p>The window size. </p> <code>3</code> <code>func</code> <code>Callable[[DataFrame], Series]</code> <p>Numpy function to be used for aggregation.  </p> <code>mean</code> <p>Returns:</p> Type Description <code>Self</code> <p>The rolled and aggregated data.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataManip.unit_rescaler","title":"<code>unit_rescaler(column, step)</code>","text":"<p>Rescale the units of the column data.</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>str</code> <p>The column to rescale.  </p> required <code>step</code> <code>int</code> <p>The step to rescale the column data by.</p> required"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataManip.update_metadata","title":"<code>update_metadata(grouped_data, gb_col_data)</code>","text":"<p>Update the metadata for the grouped data.</p> <p>Parameters:</p> Name Type Description Default <code>grouped_data</code> <code>DataFrame</code> <p>The grouped and aggregated data.  </p> required <code>gb_col_data</code> <code>dict[str, list[str]]</code> <p>The dictionary of groupby columns.  </p> required <p>Returns:</p> Type Description <code>dict[str, dict[str, str | list[str]]]</code> <p>The updated metadata.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataManip.val_rescaler","title":"<code>val_rescaler(column, multiplier)</code>","text":"<p>Rescale the values of the column data.</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>str</code> <p>The column to rescale.  </p> required <code>multiplier</code> <code>float</code> <p>The multiplier to rescale the column data by.</p> required"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataPrep","title":"<code>DataPrep</code>  <code>dataclass</code>","text":"<p>Performs data preparation steps.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>DataFrame</code> <p>The input DataFrame.</p> <code>dataprep_functions</code> <code>list[dataf_callable]</code> <p>The list of data preparation functions to be applied to the data.</p> <p>Methods:</p> Name Description <code>described_data</code> <p>Returns a DataFrame containing statistics of the input data.</p> <code>clean_data</code> <p>Applies the data preparation functions to the data.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataPrep.clean_data","title":"<code>clean_data()</code>","text":"<p>Clean the data by applying specific data preparation steps.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataPrep.concat","title":"<code>concat(secondary_data, axis=1, dataprep_functions=None)</code>","text":"<p>Concatenate two DataPrep objects.</p> <p>Parameters:</p> Name Type Description Default <code>secondary_data</code> <code>DataPrep</code> <p>The secondary DataPrep object to be concatenated to the current one.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The concatenated DataPrep objects.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataPrep.described_data","title":"<code>described_data(data)</code>","text":"<p>Returns a DataFrame containing statistics of the input data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The input DataFrame.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A DataFrame containing the calculated statistics.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.DataPrep.statistics_of_data","title":"<code>statistics_of_data(data)</code>","text":"<p>Calculate statistics for the input data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>The input DataFrame.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A DataFrame containing the calculated statistics.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.MetaData","title":"<code>MetaData</code>  <code>dataclass</code>","text":"<p>Class for storing the metadata for the dataframe.</p> <p>Attributes:</p> Name Type Description <code>metadata</code> <code>dict[str, dict[str, Any]]</code> <p>A dictionary of metadata for each column of data.</p> <p>Methods:</p> Name Description <code>units</code> <p>Get the units schema of the column data.</p> <code>siunits</code> <p>Get the SI units of the column data.</p> <code>freq</code> <p>Get the frequency schema of the column data.</p> <code>dtype</code> <p>Get the data type of the column.</p> <code>column_from_freq</code> <p>Get the column name from the frequency.</p> <code>get_x_label</code> <p>Get the label for the x-axis of the plot.</p> <code>get_y_label</code> <p>Get the label for the y-axis of the plot.</p> <code>get_title</code> <p>Get the title of the plot.</p> <code>get_legend</code> <p>Get the legend of the plot.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.MetaData.freq","title":"<code>freq: viz_schema.FrequencySchema</code>  <code>property</code>","text":"<p>Get the frequency schema of the column data.</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>str</code> <p>The column to get the frequency schema of.</p> required <p>Returns:</p> Type Description <code>FrequencySchema</code> <p>The frequency schema of the column data.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.MetaData.get_x_label","title":"<code>get_x_label: str</code>  <code>property</code>","text":"<p>Get the label for the x-axis of the plot.</p> <p>Returns:</p> Type Description <code>str</code> <p>The label for the x-axis of the plot.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.MetaData.dtype","title":"<code>dtype(col)</code>","text":"<p>Get the data type of the column.</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>str</code> <p>The column to get the data type of.</p> required <p>Returns:</p> Type Description <code>DataType</code> <p>The data type of the column.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.MetaData.get_legend","title":"<code>get_legend(col)</code>","text":"<p>Get the legend of the plot.</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>str</code> <p>The column to get the legend for.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The legend of the plot.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.MetaData.get_title","title":"<code>get_title(col, category=None)</code>","text":"<p>Get the title of the plot.</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>str</code> <p>The column to get the title for.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The title of the plot.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.MetaData.get_y_label","title":"<code>get_y_label(col)</code>","text":"<p>Get the label for the y-axis of the plot.</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>str</code> <p>The column to get the label for.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The label for the y-axis of the plot.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.MetaData.siunits","title":"<code>siunits(col)</code>","text":"<p>Get the SI units of the column data.</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>str</code> <p>The column to get the SI units of.</p> required <p>Returns:</p> Type Description <code>Prefix</code> <p>The SI units of the column data.</p>"},{"location":"reference/data/standard_data_process/#data.standard_data_process.MetaData.units","title":"<code>units(col)</code>","text":"<p>Get the units schema of the column data.</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>str</code> <p>The column to get the units schema of.</p> required <p>Returns:</p> Type Description <code>UnitsSchema</code> <p>The units schema of the column data.</p>"},{"location":"reference/visualization/","title":"Index","text":""},{"location":"reference/visualization/plot_styles/","title":"Plot styles","text":""},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.MatPlotLibPlot","title":"<code>MatPlotLibPlot</code>  <code>dataclass</code>","text":"<p>This class is used to plot the data using matplotlib.</p> <p>Attributes:</p> Name Type Description <code>container</code> <code>Optional[Axes]</code> <p>Matplotlib container holding the Axes for plotting multiple lines on one axis.</p> <code>plt_kwargs</code> <code>Optional[dict[str, str]]</code> <p>Dictionary containing the plot settings.</p> <p>Methods:</p> Name Description <code>plt_settings</code> <p>Set the plot settings for matplotlib.</p> <code>get_column_kwargs</code> <p>Get the keyword arguments for a column.</p> <code>set_kwargs</code> <p>Set the keyword arguments for a plot.</p> <code>line_plot</code> <p>Plot a line plot.</p> <code>stacked_plot</code> <p>Plot a stacked plot.</p> <code>corr_plot</code> <p>Plot a correlation plot.</p> <code>bar_plot</code> <p>Plot a bar plot.</p> <code>dt_bar_plot</code> <p>Plot a bar plot with datetime on the x-axis.</p> <code>box_plot</code> <p>Plot a box plot.</p> <code>pie_chart</code> <p>Plot a pie chart.</p> <code>show</code> <p>Show the plot.</p> <code>save</code> <p>Save the plot.</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.MatPlotLibPlot.bar_plot","title":"<code>bar_plot(dataf, plot_columns, dict_kwargs)</code>","text":"<p>Plot a bar plot</p> <p>Returns:</p> Type Description <code>None</code> <p>Fig axes are saved to the container object</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.MatPlotLibPlot.box_plot","title":"<code>box_plot(dataf, plot_columns, dict_kwargs)</code>","text":"<p>Plot a box plot</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Data to plot  </p> required <code>plot_columns</code> <code>list[str]</code> <p>Columns to plot  </p> required <code>dict_kwargs</code> <code>dict[str, dict[str, str]]</code> <p>Dictionary containing the plot settings  </p> required <p>Returns:</p> Type Description <code>None</code> <p>Fig axes are saved to the container object</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.MatPlotLibPlot.corr_plot","title":"<code>corr_plot(dataf, plot_columns, dict_kwargs)</code>","text":"<p>Plot a correlation matrix</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>Data to plot  </p> required <code>plot_columns</code> <code>list[str]</code> <p>Columns to plot  </p> required <code>dict_kwargs</code> <code>dict[str, dict[str, str]]</code> <p>Dictionary containing the plot settings  </p> required <p>Returns:</p> Type Description <code>None</code> <p>Fig axes are saved to the container object</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.MatPlotLibPlot.dt_bar_plot","title":"<code>dt_bar_plot(dataf, plot_columns, dict_kwargs)</code>","text":"<p>Plot a bar plot</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>Data to plot  </p> required <code>plot_columns</code> <code>list[str]</code> <p>Columns to plot  </p> required <code>dict_kwargs</code> <code>dict[str, dict[str, str]]</code> <p>Dictionary containing the plot settings  </p> required <p>Returns:</p> Type Description <code>None</code> <p>Fig axes are saved to the container object</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.MatPlotLibPlot.get_column_kwargs","title":"<code>get_column_kwargs(column, dict_kwargs)</code>","text":"<p>Get the keyword arguments for a column</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>str</code> <p>Column name  </p> required <code>dict_kwargs</code> <code>dict[str, dict[str, str]]</code> <p>Dictionary containing the plot settings  </p> required <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>Dictionary containing the keyword arguments</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.MatPlotLibPlot.line_plot","title":"<code>line_plot(dataf, plot_columns, dict_kwargs)</code>","text":"<p>Plot a single line plot.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>Data to plot.  </p> required <code>dict_kwargs</code> <code>dict[str, dict[str, str]]</code> <p>Dictionary containing the kwargs for each column.  </p> required <code>**plt_kwargs</code> <code>dict</code> <p>Additional matplotlib plot settings.  </p> required <p>Returns:</p> Type Description <p>Matplotlib figure.</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.MatPlotLibPlot.pie_chart","title":"<code>pie_chart(dataf, plot_columns, dict_kwargs)</code>","text":"<p>Plot a pie chart</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Series</code> <p>Data to plot  </p> required <code>plot_columns</code> <code>list[str]</code> <p>Columns to plot  </p> required <code>dict_kwargs</code> <code>dict[str, dict[str, str]]</code> <p>Dictionary containing the plot settings  </p> required <p>Returns:</p> Type Description <code>None</code> <p>Fig axes are saved to the container object</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.MatPlotLibPlot.plt_settings","title":"<code>plt_settings()</code>","text":"<p>Set the plot settings for matplotlib</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.MatPlotLibPlot.set_kwargs","title":"<code>set_kwargs(ax, kwargs)</code>","text":"<p>Set the keyword arguments for a plot</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>Axes</code> <p>Matplotlib axes  </p> required <code>kwargs</code> <code>dict[str, str]</code> <p>Dictionary containing the plot settings</p> required"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.MatPlotLibPlot.stacked_plot","title":"<code>stacked_plot(dataf, plot_columns, dict_kwargs)</code>","text":"<p>Plot a stacked line plot</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>Data to plot  </p> required <code>plot_columns</code> <code>list[str]</code> <p>Columns to plot  </p> required <code>dict_kwargs</code> <code>dict[str, dict[str, str]]</code> <p>Dictionary containing the plot settings  </p> required <p>Returns:</p> Type Description <code>None</code> <p>Fig axes are saved to the container object</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.PlotlyPlot","title":"<code>PlotlyPlot</code>  <code>dataclass</code>","text":"<p>Plotly plot class</p> <p>Attributes:</p> Name Type Description <code>container</code> <code>Figure</code> <p>Plotly figure</p> <code>plotly_kwargs</code> <code>dict[str, dict[str, str]]</code> <p>Dictionary containing the plot settings.</p> <p>Methods:</p> Name Description <code>corr_plot</code> <p>Plot a correlation matrix</p> <code>bar_plot</code> <p>Plot a bar plot</p> <code>dt_bar_plot</code> <p>Plot a bar plot</p> <code>box_plot</code> <p>Plot a box plot</p> <code>pie_chart</code> <p>Plot a pie chart</p> <code>show</code> <p>Show the plot</p> <code>save</code> <p>Save the plot</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.PlotlyPlot.bar_plot","title":"<code>bar_plot(dataf, plot_columns, dict_kwargs)</code>","text":"<p>Plot a bar plot using Plotly</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>Data to plot  </p> required <code>plot_columns</code> <code>list[str]</code> <p>Columns to plot  </p> required <code>dict_kwargs</code> <code>dict[str, dict[str, str]]</code> <p>Dictionary containing the plot settings  </p> required <p>Returns:</p> Type Description <code>None</code> <p>Updates the figure with the bar plot</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.PlotlyPlot.box_plot","title":"<code>box_plot(dataf, plot_columns, dict_kwargs)</code>","text":"<p>Create a box plot.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>Data to plot  </p> required <code>plot_columns</code> <code>list[str]</code> <p>Columns to plot  </p> required <code>dict_kwargs</code> <code>dict[str, dict[str, str]]</code> <p>Plot settings  </p> required <p>Returns:</p> Type Description <code>None</code> <p>Updates the figure with the box plot</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.PlotlyPlot.corr_plot","title":"<code>corr_plot(dataf, plot_columns, dict_kwargs)</code>","text":"<p>Plot a correlation matrix</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>Dataframe to plot.  </p> required <code>plot_columns</code> <code>list[str]</code> <p>Columns to plot.  </p> required <code>dict_kwargs</code> <code>dict[str, dict[str, str]]</code> <p>Dictionary containing the plot settings.  </p> required <p>Returns:</p> Type Description <code>None</code> <p>Updates the figure with the correlation plot</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.PlotlyPlot.dt_bar_plot","title":"<code>dt_bar_plot(dataf, plot_columns, dict_kwargs)</code>","text":"<p>Plot a datetime bar plot using Plotly.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>Data to plot  </p> required <code>plot_columns</code> <code>list[str]</code> <p>Columns to plot  </p> required <code>dict_kwargs</code> <code>dict[str, dict[str, str]]</code> <p>Dictionary containing the plot settings  </p> required <p>Returns:</p> Type Description <code>None</code> <p>Updates the figure with the bar plot</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.PlotlyPlot.get_column_kwargs","title":"<code>get_column_kwargs(column, dict_kwargs)</code>","text":"<p>Get the keyword arguments for a column</p> <p>Parameters:</p> Name Type Description Default <code>column</code> <code>str</code> <p>Column name  </p> required <code>dict_kwargs</code> <code>dict[str, dict[str, str]]</code> <p>Dictionary containing the plot settings</p> required <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>Dictionary containing the keyword arguments</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.PlotlyPlot.line_plot","title":"<code>line_plot(dataf, plot_columns, dict_kwargs, x=None)</code>","text":"<p>Plot a single line plot</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>Dataframe to plot  </p> required <code>plot_columns</code> <code>list[str]</code> <p>Columns to plot  </p> required <code>dict_kwargs</code> <code>dict[str, dict[str, str]]</code> <p>Dictionary containing the plot settings  </p> required <code>x</code> <code>str</code> <p>x-axis column name, by default None, in which case datetime index is used.  </p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>Updates the figure with the line plot</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.PlotlyPlot.pie_chart","title":"<code>pie_chart(dataf, plot_columns, dict_kwargs)</code>","text":"<p>Create a pie chart.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Series</code> <p>Data to plot  </p> required <code>plot_columns</code> <code>list[str]</code> <p>Columns to plot  </p> required <code>dict_kwargs</code> <code>dict[str, dict[str, str]]</code> <p>Plot settings  </p> required <p>Returns:</p> Type Description <code>None</code> <p>Updates the figure with the pie chart</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.PlotlyPlot.plotly_settings","title":"<code>plotly_settings(fig)</code>","text":"<p>Set the plotly figure settings</p> <p>Returns:</p> Type Description <code>None</code> <p>The <code>self.container</code> is updated with the figure</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.PlotlyPlot.save","title":"<code>save(save_path)</code>","text":"<p>Saves the plot </p> <p><code>save_path Path</code>     Path to save the plot</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.PlotlyPlot.set_kwargs","title":"<code>set_kwargs(fig, kwargs)</code>","text":"<p>Set the keyword arguments for a plot</p> <p>Parameters:</p> Name Type Description Default <code>fig</code> <code>Figure</code> <p>Plotly figure  </p> required <code>kwargs</code> <code>dict[str, str]</code> <p>Dictionary containing the plot settings  </p> required <p>Returns     Updates the figure with the keyword arguments</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.PlotlyPlot.show","title":"<code>show()</code>","text":"<p>Shows the plot</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.PlotlyPlot.stacked_plot","title":"<code>stacked_plot(dataf, plot_columns, dict_kwargs)</code>","text":"<p>Plot a stacked line plot</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>Dataframe to plot.  </p> required <code>plot_columns</code> <code>list[str]</code> <p>Columns to plot.  </p> required <code>dict_kwargs</code> <code>dict[str, dict[str, str]]</code> <p>Dictionary containing the plot settings.  </p> required <p>Returns:</p> Type Description <code>None</code> <p>Updates the figure with the stacked line plot</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.custom_plot","title":"<code>custom_plot(x, y, ax=None, **plt_kwargs)</code>","text":"<p>Create a custom plot using matplotlib.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Any</code> <p>x-axis values  </p> required <code>y</code> <code>Any</code> <p>y-axis values  </p> required <code>ax</code> <code>Axes | None</code> <p>Matplotlib axes, by default None  </p> <code>None</code> <code>**plt_kwargs</code> <code>dict[str, str]</code> <p>Additional matplotlib plot settings  </p> <code>{}</code> <p>Returns:</p> Type Description <code>Axes</code> <p>Matplotlib axes</p>"},{"location":"reference/visualization/plot_styles/#visualization.plot_styles.custom_plot_from_df","title":"<code>custom_plot_from_df(dataf, ax=None, **plt_kwargs)</code>","text":"<p>Create a custom plot using matplotlib from a DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>Data to plot  </p> required <code>ax</code> <code>Axes</code> <p>Matplotlib axes, by default None  </p> <code>None</code> <code>**plt_kwargs</code> <code>dict[str, str]</code> <p>Additional matplotlib plot settings  </p> <code>{}</code> <p>Returns:</p> Type Description <code>Axes</code> <p>Matplotlib axes</p>"},{"location":"reference/visualization/visualize/","title":"Visualize","text":""},{"location":"reference/visualization/visualize/#visualization.visualize.DataViz","title":"<code>DataViz</code>  <code>dataclass</code>","text":"<p>Visualises the data.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>DataFrame</code> <p>The data to be visualised.</p> <code>metadata</code> <code>MetaData</code> <p>The metadata of the data.</p> <code>viz_selector</code> <code>LibraryViz</code> <p>The visualisation library to be used.</p> <code>plot_columns</code> <code>list[str]</code> <p>The columns to be plotted.</p> <code>x</code> <code>str</code> <p>The x-axis column.</p> <code>freq</code> <code>str</code> <p>The frequency of the data.</p> <p>Methods:</p> Name Description <code>plot</code> <p>Plots the data through the chosen viz_selector.</p> <code>show_viz</code> <p>Shows the visualisation.</p> <code>save_figure</code> <p>Saves the figure.</p> <code>structured_data</code> <p>Returns the data in a structured format.</p> <code>create_dict_kwargs</code> <p>Creates the list of kwargs for each column.</p> <code>_process_grouped_data</code> <p>Process grouped data and pivot if needed.</p> <code>format_index</code> <p>Format the index of the data based on the number of index columns in the metadata.</p> <code>_adjust_index</code> <p>Adjust index to be a continuous variable.</p> <code>remove_index_cols</code> <p>Remove the index columns from the data after they've been reset.</p> <code>pivot_data</code> <p>Pivot the data based on the metadata grouped columns.</p>"},{"location":"reference/visualization/visualize/#visualization.visualize.DataViz.plot_factory","title":"<code>plot_factory: dict[str, Callable]</code>  <code>property</code>","text":"<p>Returns the plot factory used for plotting the specific plot type.</p> <p>Returns:</p> Type Description <code>dict[str, Callable]</code> <p>The plot factory used for plotting the specific plot type.</p>"},{"location":"reference/visualization/visualize/#visualization.visualize.DataViz.create_dict_kwargs","title":"<code>create_dict_kwargs()</code>","text":"<p>Creates the dict of dicts of kwargs for each column.</p> <p>Returns:</p> Type Description <code>dict[str, dict[str, Any]]</code> <p>The dict of dicts of kwargs for each column.</p>"},{"location":"reference/visualization/visualize/#visualization.visualize.DataViz.format_index","title":"<code>format_index(dataf)</code>","text":"<p>Format the index of the data based on the number of index columns in the metadata.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The data to be formatted.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The formatted data.</p>"},{"location":"reference/visualization/visualize/#visualization.visualize.DataViz.pivot_data","title":"<code>pivot_data(dataf)</code>","text":"<p>Pivot the data based on the metadata grouped columns.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The data to be pivoted.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The pivoted data.</p>"},{"location":"reference/visualization/visualize/#visualization.visualize.DataViz.plot","title":"<code>plot(plot_kind)</code>","text":"<p>Plots the data through the chosen viz_selector. Options: <code>line_plot</code>, <code>stacked_plot</code>, <code>corr_plot</code>, <code>bar_plot</code>, <code>dt_bar_plot</code>, <code>box_plot</code>, <code>pie_chart</code></p> <p>Parameters:</p> Name Type Description Default <code>plot_kind</code> <code>str</code> <p>The kind of plot to be plotted.</p> required"},{"location":"reference/visualization/visualize/#visualization.visualize.DataViz.remove_index_cols","title":"<code>remove_index_cols(dataf)</code>","text":"<p>Remove the index columns from the data after they've been reset.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The data to be processed.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>The processed data.</p>"},{"location":"reference/visualization/visualize/#visualization.visualize.DataViz.save_figure","title":"<code>save_figure(save_path)</code>","text":"<p>Saves the figure.</p> <p>Parameters:</p> Name Type Description Default <code>save_path</code> <code>Path</code> <p>The path to save the figure along.</p> required"},{"location":"reference/visualization/visualize/#visualization.visualize.DataViz.show_viz","title":"<code>show_viz()</code>","text":"<p>Shows the visualisation.</p>"},{"location":"reference/visualization/visualize/#visualization.visualize.DataViz.structured_data","title":"<code>structured_data()</code>","text":"<p>Returns the data in a structured format.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The data in a structured format.</p>"},{"location":"reference/visualization/visualize/#visualization.visualize.LibraryViz","title":"<code>LibraryViz</code>","text":"<p>             Bases: <code>Protocol</code></p> <p>Selects the visualisation library to be used (<code>e2sviz.visualization.plot_styles</code>)</p>"},{"location":"reference/visualization/visualize/#visualization.visualize.MetaData","title":"<code>MetaData</code>","text":"<p>             Bases: <code>Protocol</code></p> <p>Stores the meta data and returns values for labeling plots (<code>e2sviz.data.standard_data_process</code>).</p>"}]}